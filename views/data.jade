extends layout

block content
  h1= title
  div.myDiv(id="output")
  div
      -for(var prop in item[0]){
      p
       =prop
       |:
       =item[0][prop]
      -}
      p This is where I open a comport
      p #{item[0].Time}
      p UnitID: #{item[0].UnitID}
      p Outside: #{item[0].Temp_1_0}
      p Freezer: #{item[0].oneWire1}
      p Inside Mid: #{item[0].oneWire2}
      p Inside Floor: #{item[0].oneWire3}
      p Refrigerator: #{item[0].oneWire4}
      button(onclick = "buttonclick()") Todd Made this form Me!
   div
      canvas(id="a",height="500",width="1000")
  style.
    .myDiv { height: 150px;overflow: scroll; float: right; }


  script.
   var wsUri = "ws://10.6.1.119:8080";
   var output;

    var dp = !{JSON.stringify(item)};
      var a_canvas = document.getElementById("a");
      var c = a_canvas.getContext("2d");
          c.translate(1000.5,500.5);
          c.rotate(Math.PI);
            c.font = "14px sans-serif";
      function graph(){

       c.clearRect(0, 0, 1000,500);
      c.lineWidth = 1;
    c.strokeStyle = "rgb(0,0,0)";
    c.beginPath();
        var avg0=0;
      for (var i = 0; i<100; ++i){
        avg0=avg0+((dp[i].oneWire0));
      c.lineTo(i,((dp[i].oneWire0)*10)-(30*10));
        }

        c.moveTo(0,((avg0/100)*10)-(30*10));
        c.lineTo(100,((avg0/100)*10)-(30*10));
        c.save();
        c.translate(1000,((avg0/100)*10)-(30*10));
        c.rotate(Math.PI);

        c.fillText((avg0/100).toFixed(2),0,-2);
        c.restore();
        c.stroke();
      // start oneWire1
      c.beginPath();
      c.strokeStyle = "rgb(55,55,255)";
        c.moveTo(0,((dp[0].oneWire1)*10)-(-20*10));
        avg0=0;
    for (var i = 0; i<1000; ++i){
        avg0=avg0+((dp[i].oneWire1));
        c.lineTo(i,((dp[i].oneWire1)*10)-(-20*10));
            }



    c.moveTo(0,((avg0/1000)*10)-(-20*10));
        c.lineTo(1000,((avg0/1000)*10)-(-20*10));
        c.save();
        c.translate(1000,((avg0/1000)*10)-(-20*10));
        c.rotate(Math.PI);

        c.fillText((avg0/1000).toFixed(2),0,-2);
        c.restore();
        c.stroke();
    c.strokeStyle = "#0000FF";
        c.beginPath();
      c.moveTo(0,((dp[0].oneWire2)*10)-(50*10));
          for (var i = 0; i<1000; ++i){
              c.lineTo(i,((dp[i].oneWire2)*10)-(50*10));
                  }

        c.stroke();
        c.beginPath();
        c.lineWidth = 1;
        c.moveTo(0,((dp[0].oneWire3)*10)-(50*10));
          for (var i = 0; i<1000; ++i){
              c.lineTo(i,((dp[i].oneWire3)*10)-(50*10));
                  }
        c.strokeStyle = "#00FF00";
      c.stroke();

      c.beginPath();
      c.moveTo(0,((dp[0].oneWire4)*10)-(30*10));
          for (var i = 0; i<1000; ++i){
              c.lineTo(i,((dp[i].oneWire4)*10)-(30*10));
                 }
      c.strokeStyle = "#FF0000";
      c.stroke();
         }

        function init()
      {
          output = document.getElementById("output");
      testWebSocket();
      graph();
      }
      function testWebSocket()
      {
      websocket = new WebSocket(wsUri);
      websocket.onopen = function(evt) { onOpen(evt) };
      websocket.onclose = function(evt) { onClose(evt) };
      websocket.onmessage = function(evt) { onMessage(evt) };
      websocket.onerror = function(evt) { onError(evt) };
      }
      function onOpen(evt) { writeToScreen("CONNECTED");
          //   doSend("WebSocket rocks");
      }
      function onClose(evt) {
          writeToScreen("DISCONNECTED");
      }
      function onMessage(evt)    {
        dp = JSON.parse(evt.data);

          writeToScreen(dp[0].UnitID);
            graph();
          //websocket.close();
      }
      function onError(evt) {
          writeToScreen('<span style="color: red;">ERROR:</span> ' + evt.data);
      }
      function doSend(message) {
          writeToScreen("SENT: " + message);  websocket.send(message);
      }
      function writeToScreen(message) {

          output.innerHTML = message+"<BR>"+output.innerHTML;
      }
        function buttonclick(message) {

            output.innerHTML = "Send something out the websocket!";
        }
      window.addEventListener("load", init, false);